-- Class to represent a node in the travel graph
-- On this context, a node is a geographical location
class Node

types
	public Location = seq1 of (char);	-- type for a location name
	public Country = seq1 of (char)		-- type for a country name

values
	public
  	MIN_PRIORITY = 9999999999				-- minimal priority a node can have
  																	-- (the lesser, the more prioritary)

instance variables
  public priority:real;								-- priority of the node
  public coordinateNS:real;						-- normalized North-South coordinate
  public coordinateEW:real;						-- normalized East-West coordinate
  public location:Location;						-- location name
  public country:Country;							-- country it belongs to
  public outwardEdges:set of (Edge);	-- edges that have this node as its source
  public path:Node;										-- node that precedes this one
  public processed:bool;							-- flag to tell whether the node was processed
																			-- during Dijkstra's algorithm
operations
  -- Constructor
	public Node : real * real * Location * Country ==> Node
	Node(cdNS, cdEW, loc, con) ==
	(
		priority := MIN_PRIORITY;
		coordinateNS := cdNS;
		coordinateEW := cdEW;
		location := loc;
		country := con;
		outwardEdges := {};
		processed := false;
		path := self;
		return self;
	)
	pre cdNS >= -90.0 and
			 cdNS <= 90.0 and
			 cdEW >= -180.0 and
			 cdEW <= 180.0;
	
	-- Sets the priority of the node
	public setPriority : real ==> ()
	setPriority(pri) ==
		priority := pri
	pre pri >= 0.0 and pri <= MIN_PRIORITY;
	
	-- Sets the path of the node
	public setPath : Node ==> ()
	setPath(n) ==
	  path := n;
	  
	-- Changes the processed flag
	public setProcessed : bool ==> ()
	setProcessed(p) ==
	  processed := p;
	
	-- Adds an edge with this node as source
	public addEdge : Edge ==> ()
	addEdge(edge) ==
	  outwardEdges := {edge} union outwardEdges;
		
end Node
