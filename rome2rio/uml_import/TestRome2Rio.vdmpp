class TestRome2Rio is subclass of MyTestCase

operations
/** USE CASE SCENARIOS**/


/** UNIT TESTS **/

public testAddNodesAndEdges: () ==> ()
testAddNodesAndEdges() == (
	dcl graph: Graph := new Graph();
	
	graph.addNode("L1", 1.0, 1.0);
	graph.addNode("L2", 4.0, 2.0);
	graph.addNode("L3", 5.0, 3.0);
	assertEqual(3, card graph.node);
	
	graph.addEdge("L1", "L2", new EdgeType(<CAR>, 1, 1, 1.0));
	graph.addEdge("L1", "L3", new EdgeType(<FERRY>, 10, 2, 2.0));
	assertEqual(2, card graph.findNode("L1").outwardEdges);
	graph.addEdge("L3", "L2", new EdgeType(<PLANE>, 100, 3, 3.0));
	graph.addEdge("L2", "L1", new EdgeType(<BUS>, 1000, 4, 4.0));
	graph.addEdge("L2", "L1", new EdgeType(<TRAIN>, 10000, 5, 5.0));
	assertEqual(5, card graph.edge);
	
	assertEqual("L1", graph.findEdge("L1", "L2").sourceNode.location);
	assertEqual("L2", graph.findEdge("L1", "L2").targetNode.location);
	
	graph.addEdgeType("L1", "L2", new EdgeType(<FERRY>, 1, 1, 1.0));
	assertEqual(2, card graph.findEdge("L1", "L2").edgeType);
	graph.addEdgeType("L1", "L2", new EdgeType(<PLANE>, 1, 1, 1.0));
	assertEqual(3, card graph.findEdge("L1", "L2").edgeType);
	graph.addEdgeType("L1", "L2", new EdgeType(<BUS>, 1, 1, 1.0));
	assertEqual(4, card graph.findEdge("L1", "L2").edgeType);
	graph.addEdgeType("L1", "L2", new EdgeType(<TRAIN>, 1, 1, 1.0));
	assertEqual(5, card graph.findEdge("L1", "L2").edgeType);
);

public testPriorityQueue: () ==> ()
testPriorityQueue() == 
(
	dcl pq: PriorityQueue := new PriorityQueue();
	dcl node1: Node := new Node(5.1, 3.1, "L1");
	dcl node2: Node := new Node(5.2, 3.2, "L2");
	dcl node3: Node := new Node(5.3, 3.3, "L3");
	dcl node4: Node := new Node(5.4, 3.4, "L4");
	node1.setPriority(50);
	node2.setPriority(100);
	node3.setPriority(3);
	node4.setPriority(20);
	pq.addElement(node1);
	pq.addElement(node2);
	pq.addElement(node3);
	pq.addElement(node4);
	assertEqual(4, card pq.elements);
	assertEqual(node3, pq.pop());
	assertEqual(node4, pq.pop());
	assertEqual(node1, pq.pop());
	assertEqual(node2, pq.pop());
	assertEqual(true, pq.isEmpty());
	pq.addElement(node1);
	pq.addElement(node2);
	assertEqual(false, pq.isEmpty());
	pq.clear();
	assertEqual(true, pq.isEmpty());
);

public testAll: () ==> ()
testAll() == (
  testAddNodesAndEdges();
  testPriorityQueue();
);

end TestRome2Rio